# nginx設定例 (LAN内SSL対応)
# Exit4 Operation Kit - リバースプロキシ設定

# アップストリームの定義（Node.jsサーバー）
upstream nodejs_backend {
    server localhost:3000;
    keepalive 64;
}

# HTTPからHTTPSへのリダイレクト
server {
    listen 80;
    listen [::]:80;
    server_name exit4-operation.local;  # LAN内のドメイン名に変更してください
    
    # Let's Encryptの証明書検証用（必要な場合）
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # すべてのHTTPリクエストをHTTPSにリダイレクト
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS設定
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name exit4-operation.local;  # LAN内のドメイン名に変更してください

    # SSL証明書の設定
    # 相対パスの例（プロジェクトルートのsslディレクトリを使用する場合）
    ssl_certificate /path/to/exit4-operation-kit/ssl/certificate.crt;
    ssl_certificate_key /path/to/exit4-operation-kit/ssl/private.key;
    
    # または絶対パスの例
    # ssl_certificate /etc/ssl/certs/exit4.crt;
    # ssl_certificate_key /etc/ssl/private/exit4.key;
    
    # SSL設定（強化版）
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    
    # SSL セッション設定
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS (HTTP Strict Transport Security)
    # LAN内では無効化してもOK
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # ログ設定
    access_log /var/log/nginx/exit4_access.log;
    error_log /var/log/nginx/exit4_error.log;

    # クライアントボディサイズの制限（アップロード用）
    client_max_body_size 10M;
    
    # タイムアウト設定
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # 静的ファイルとリバースプロキシ
    location / {
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        
        # WebSocket対応のためのヘッダー
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        
        # プロキシヘッダー
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # キャッシュ設定
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # バッファリング設定
        proxy_buffering off;
        proxy_redirect off;
    }

    # WebSocket接続（専用エンドポイント）
    location /ws {
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        
        # WebSocket必須ヘッダー
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        
        # プロキシヘッダー
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocketのタイムアウト設定（長時間接続用）
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # バッファリング無効化
        proxy_buffering off;
    }
    
    # 静的ファイルのキャッシュ設定（パフォーマンス向上）
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # キャッシュ設定
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
}

# ============================================
# nginx設定手順
# ============================================

# 【前提条件】
# - nginxがインストールされていること
# - OpenSSLがインストールされていること
# - Node.jsサーバーがポート3000で稼働していること

# 【セットアップ手順】

# 1. SSL証明書の生成
# ----------------------------------------
# Linux/macOS:
#   ./generate-ssl-cert.sh
#
# Windows (PowerShell):
#   .\generate-ssl-cert.ps1
#
# または手動で生成:
#   openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
#     -keyout ./ssl/private.key \
#     -out ./ssl/certificate.crt \
#     -subj "/C=JP/ST=Tokyo/L=Tokyo/O=Exit4 Operation/OU=IT/CN=exit4-operation.local"

# 2. nginx設定ファイルのコピー
# ----------------------------------------
# Linux/macOS:
#   sudo cp nginx.conf.example /etc/nginx/sites-available/exit4
#   sudo ln -s /etc/nginx/sites-available/exit4 /etc/nginx/sites-enabled/
#
# Windows (nginx for Windows):
#   copy nginx.conf.example C:\nginx\conf\exit4.conf
#   # nginx.confに include conf/exit4.conf; を追加

# 3. 設定ファイルの編集
# ----------------------------------------
# 以下の項目を環境に合わせて変更:
# - server_name: LAN内のドメイン名またはIPアドレス
# - ssl_certificate: 証明書ファイルの絶対パス
# - ssl_certificate_key: 秘密鍵ファイルの絶対パス
# - upstream nodejs_backend server: Node.jsサーバーのアドレスとポート

# 4. nginx設定のテスト
# ----------------------------------------
# Linux/macOS:
#   sudo nginx -t
#
# Windows:
#   C:\nginx\nginx.exe -t

# 5. nginxの起動/再起動
# ----------------------------------------
# Linux/macOS (systemd):
#   sudo systemctl restart nginx
#   sudo systemctl status nginx
#
# Linux/macOS (直接実行):
#   sudo nginx -s reload
#
# Windows:
#   C:\nginx\nginx.exe -s reload

# 6. ファイアウォールの設定
# ----------------------------------------
# ポート80と443を開放:
#
# Linux (ufw):
#   sudo ufw allow 80/tcp
#   sudo ufw allow 443/tcp
#
# Windows:
#   netsh advfirewall firewall add rule name="nginx HTTP" dir=in action=allow protocol=TCP localport=80
#   netsh advfirewall firewall add rule name="nginx HTTPS" dir=in action=allow protocol=TCP localport=443

# 7. hostsファイルの設定（ローカルテスト用）
# ----------------------------------------
# /etc/hosts (Linux/macOS) または C:\Windows\System32\drivers\etc\hosts (Windows) に追加:
#   127.0.0.1  exit4-operation.local

# 8. 動作確認
# ----------------------------------------
# ブラウザで以下のURLにアクセス:
#   https://exit4-operation.local
#
# 自己署名証明書の警告が表示された場合:
#   「詳細設定」→「サイトにアクセスする（安全ではありません）」を選択

# ============================================
# トラブルシューティング
# ============================================

# nginxのエラーログを確認:
#   sudo tail -f /var/log/nginx/exit4_error.log

# Node.jsサーバーが起動しているか確認:
#   curl http://localhost:3000

# ポートが使用中か確認:
#   netstat -an | grep :443

# SSL証明書の内容を確認:
#   openssl x509 -in ./ssl/certificate.crt -text -noout

# ============================================
# セキュリティに関する注意事項
# ============================================

# 1. 自己署名証明書は開発/LAN内使用のみを想定
#    本番環境では Let's Encrypt などの正式な証明書を使用してください

# 2. 秘密鍵のパーミッションを適切に設定
#    chmod 600 ./ssl/private.key

# 3. 定期的にnginxとOpenSSLを最新版にアップデート

# 4. 本番環境ではファイアウォールとSELinux/AppArmorの設定を確認

# ============================================
# パフォーマンスチューニング（オプション）
# ============================================

# nginx.confの最適化例:
#   worker_processes auto;
#   worker_connections 1024;
#   keepalive_timeout 65;
#   gzip on;
#   gzip_types text/plain text/css application/json application/javascript;
